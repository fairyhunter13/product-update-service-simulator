name: CI

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  pull_request:
  workflow_dispatch:

jobs:
  fmt-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Install dev tools
        run: make tools
      - name: Check formatting (gofumpt)
        run: make fmt-check
      - name: Vet
        run: make vet
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.5.0
          install-mode: binary
          args: --timeout=5m
      - name: Dockerfile lint (hadolint)
        run: make security-hadolint
      - name: "Docs validation (README sections)"
        run: make docs-validate

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Install security tools
        run: make tools-security
      - name: Go vulnerability scan (govulncheck)
        run: make security-govulncheck
      - name: Go static security scan (gosec)
        run: make security-gosec
      - name: Repo secrets scan (gitleaks)
        run: make security-gitleaks
      - name: Filesystem vulnerability scan (Trivy FS)
        run: make security-trivy-fs

  build-test:
    runs-on: ubuntu-latest
    needs: [fmt-lint, security]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Vet
        run: make vet
      - name: Test internal packages (race, coverage for gate)
        run: make test-unit
      - name: Test all non-integration packages (race)
        run: make test-non-integration
      - name: Enforce coverage threshold
        env:
          COVERAGE_THRESHOLD: '80.0'
        run: make coverage-enforce
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
      - name: Docker build
        run: make docker-build

  integration:
    runs-on: ubuntu-latest
    needs: [build-test]
    steps:
      - uses: actions/checkout@v4
      - name: Integration via docker compose
        run: make compose-integration

  container-security:
    runs-on: ubuntu-latest
    needs: [build-test]
    steps:
      - uses: actions/checkout@v4
      - name: Image vulnerability scan (Trivy Image)
        run: make security-trivy-image

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [fmt-lint, security, build-test]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  pages:
    name: Publish Test Reports to GitHub Pages
    runs-on: ubuntu-latest
    needs: [integration]
    permissions:
      pages: write
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dev and security tools
        run: make tools tools-security
      - name: "Generate JUnit: unit tests"
        run: make reports-unit-junit
      - name: "Generate JUnit: integration tests"
        run: make reports-integration-junit
      - name: Render HTML reports
        run: make reports-html
      - name: Publish API docs (OpenAPI + Swagger UI)
        run: make pages-openapi
      - name: Configure Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
